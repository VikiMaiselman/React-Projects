{"ast":null,"code":"var _jsxFileName = \"/Users/victoriamaizelman/Desktop/React/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard() {\n    let board = [];\n    for (let i = 0; i < this.props.nrows; ++i) {\n      let row = [];\n      for (let j = 0; j < this.props.ncols; ++j) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n  flipCellsAround(coord) {\n    let {\n      ncols,\n      nrows\n    } = this.props;\n    let board = this.state.board;\n    let [i, j] = coord.split(\"-\").map(Number);\n    function flipCell(i, j) {\n      // if this coord is actually on board, flip it\n\n      if (j >= 0 && j < ncols && i >= 0 && i < nrows) {\n        board[i][j] = !board[i][j];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(i, j);\n    flipCell(i + 1, j);\n    flipCell(i - 1, j);\n    flipCell(i, j + 1);\n    flipCell(i, j - 1);\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    const hasWon = board.every(row => row.every(cell => !cell)); // every cell in every row is false\n\n    this.setState({\n      board,\n      hasWon\n    });\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    if (this.state.hasWon) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"neon\",\n          children: \"You\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Won\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n    // if the game is won, just show a winning msg & render nothing else\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"neon\",\n        children: [\"Lights \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"flux\",\n          children: \"out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"Board\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.state.board.map((row, i) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: row.map((cell, j) => {\n                return /*#__PURE__*/_jsxDEV(Cell, {\n                  id: \"\".concat(i, \"-\").concat(j),\n                  isLit: cell,\n                  flipCellsAroundMe: this.flipCellsAround\n                }, \"\".concat(i, \"-\").concat(j), false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 28\n                }, this);\n              })\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 24\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\nBoard.defaultProps = {\n  nrows: 2,\n  ncols: 2,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"names":["React","Component","Cell","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","constructor","props","state","hasWon","board","createBoard","flipCellsAround","bind","i","nrows","row","j","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","every","cell","setState","render","children","className","fileName","_jsxFileName","lineNumber","columnNumber","id","concat","isLit","flipCellsAroundMe","defaultProps"],"sources":["/Users/victoriamaizelman/Desktop/React/react-lights-out-starter/src/Board.js"],"sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 2, \n    ncols: 2,\n    chanceLightStartsOn: 0.25,\n  }\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false, \n      board: this.createBoard()\n    }\n\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard() {\n    let board = [];\n    for (let i = 0; i < this.props.nrows; ++i) {\n      let row = [];\n      for (let j = 0; j < this.props.ncols; ++j) {\n        row.push(Math.random() < this.props.chanceLightStartsOn)\n      }\n      board.push(row);\n    }\n\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [i, j] = coord.split(\"-\").map(Number);\n\n    function flipCell(i, j) {\n      // if this coord is actually on board, flip it\n\n      if (j >= 0 && j < ncols && i >= 0 && i < nrows) {\n        board[i][j] = !board[i][j];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(i,j);\n    flipCell(i+1,j);\n    flipCell(i-1, j);\n    flipCell(i, j+1);\n    flipCell(i, j-1);\n\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    const hasWon = board.every(row => row.every(cell => !cell)); // every cell in every row is false\n\n    this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    if (this.state.hasWon) {\n      return (\n        <>\n          <span className=\"neon\">You</span>\n          <span>Won</span>\n        </>\n      )\n    }\n    // if the game is won, just show a winning msg & render nothing else\n    return (\n      <>\n        <h1 className=\"neon\">Lights <span className=\"flux\">out</span></h1>\n        <h1>out</h1>\n        <table className=\"Board\">\n          <tbody>\n              \n              {this.state.board.map((row, i) => {\n                return <tr key={i}>\n                  {row.map((cell, j) => {\n                    return <Cell key={`${i}-${j}`} id={`${i}-${j}`} isLit={cell} flipCellsAroundMe={this.flipCellsAround}/>\n                  })}\n                </tr>\n                \n              })}\n\n          </tbody>\n        </table>\n      </>\n    );\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,SAAS,QAAO,OAAO;AACtC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,aAAa;;AAGpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AA0BA,MAAMC,KAAK,SAASN,SAAS,CAAC;EAO5BO,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;;IAEZ;IACA,IAAI,CAACC,KAAK,GAAG;MACXC,MAAM,EAAE,KAAK;MACbC,KAAK,EAAE,IAAI,CAACC,WAAW,CAAC;IAC1B,CAAC;IAED,IAAI,CAACC,eAAe,GAAG,IAAI,CAACA,eAAe,CAACC,IAAI,CAAC,IAAI,CAAC;EACxD;;EAEA;EACAF,WAAWA,CAAA,EAAG;IACZ,IAAID,KAAK,GAAG,EAAE;IACd,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACP,KAAK,CAACQ,KAAK,EAAE,EAAED,CAAC,EAAE;MACzC,IAAIE,GAAG,GAAG,EAAE;MACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACV,KAAK,CAACW,KAAK,EAAE,EAAED,CAAC,EAAE;QACzCD,GAAG,CAACG,IAAI,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,CAACd,KAAK,CAACe,mBAAmB,CAAC;MAC1D;MACAZ,KAAK,CAACS,IAAI,CAACH,GAAG,CAAC;IACjB;IAEA,OAAON,KAAK;EACd;;EAEA;EACAE,eAAeA,CAACW,KAAK,EAAE;IACrB,IAAI;MAACL,KAAK;MAAEH;IAAK,CAAC,GAAG,IAAI,CAACR,KAAK;IAC/B,IAAIG,KAAK,GAAG,IAAI,CAACF,KAAK,CAACE,KAAK;IAC5B,IAAI,CAACI,CAAC,EAAEG,CAAC,CAAC,GAAGM,KAAK,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;IAEzC,SAASC,QAAQA,CAACb,CAAC,EAAEG,CAAC,EAAE;MACtB;;MAEA,IAAIA,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGC,KAAK,IAAIJ,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGC,KAAK,EAAE;QAC9CL,KAAK,CAACI,CAAC,CAAC,CAACG,CAAC,CAAC,GAAG,CAACP,KAAK,CAACI,CAAC,CAAC,CAACG,CAAC,CAAC;MAC5B;IACF;;IAEA;IACAU,QAAQ,CAACb,CAAC,EAACG,CAAC,CAAC;IACbU,QAAQ,CAACb,CAAC,GAAC,CAAC,EAACG,CAAC,CAAC;IACfU,QAAQ,CAACb,CAAC,GAAC,CAAC,EAAEG,CAAC,CAAC;IAChBU,QAAQ,CAACb,CAAC,EAAEG,CAAC,GAAC,CAAC,CAAC;IAChBU,QAAQ,CAACb,CAAC,EAAEG,CAAC,GAAC,CAAC,CAAC;;IAGhB;IACA;IACA,MAAMR,MAAM,GAAGC,KAAK,CAACkB,KAAK,CAACZ,GAAG,IAAIA,GAAG,CAACY,KAAK,CAACC,IAAI,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAAC;;IAE7D,IAAI,CAACC,QAAQ,CAAC;MAACpB,KAAK;MAAED;IAAM,CAAC,CAAC;EAChC;;EAGA;;EAEAsB,MAAMA,CAAA,EAAG;IAEP,IAAI,IAAI,CAACvB,KAAK,CAACC,MAAM,EAAE;MACrB,oBACEP,OAAA,CAAAE,SAAA;QAAA4B,QAAA,gBACE9B,OAAA;UAAM+B,SAAS,EAAC,MAAM;UAAAD,QAAA,EAAC;QAAG;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACjCnC,OAAA;UAAA8B,QAAA,EAAM;QAAG;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA,eAChB,CAAC;IAEP;IACA;IACA,oBACEnC,OAAA,CAAAE,SAAA;MAAA4B,QAAA,gBACE9B,OAAA;QAAI+B,SAAS,EAAC,MAAM;QAAAD,QAAA,GAAC,SAAO,eAAA9B,OAAA;UAAM+B,SAAS,EAAC,MAAM;UAAAD,QAAA,EAAC;QAAG;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClEnC,OAAA;QAAA8B,QAAA,EAAI;MAAG;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACZnC,OAAA;QAAO+B,SAAS,EAAC,OAAO;QAAAD,QAAA,eACtB9B,OAAA;UAAA8B,QAAA,EAEK,IAAI,CAACxB,KAAK,CAACE,KAAK,CAACe,GAAG,CAAC,CAACT,GAAG,EAAEF,CAAC,KAAK;YAChC,oBAAOZ,OAAA;cAAA8B,QAAA,EACJhB,GAAG,CAACS,GAAG,CAAC,CAACI,IAAI,EAAEZ,CAAC,KAAK;gBACpB,oBAAOf,OAAA,CAACF,IAAI;kBAAmBsC,EAAE,KAAAC,MAAA,CAAKzB,CAAC,OAAAyB,MAAA,CAAItB,CAAC,CAAG;kBAACuB,KAAK,EAAEX,IAAK;kBAACY,iBAAiB,EAAE,IAAI,CAAC7B;gBAAgB,MAAA2B,MAAA,CAAhFzB,CAAC,OAAAyB,MAAA,CAAItB,CAAC;kBAAAiB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAA2E,CAAC;cACzG,CAAC;YAAC,GAHYvB,CAAC;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAIb,CAAC;UAEP,CAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA,eACR,CAAC;IAEL;;IAEA;;IAEA;EACF;AACF;AAtGMhC,KAAK,CACFqC,YAAY,GAAG;EACpB3B,KAAK,EAAE,CAAC;EACRG,KAAK,EAAE,CAAC;EACRI,mBAAmB,EAAE;AACvB,CAAC;AAoGH,eAAejB,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}