{"ast":null,"code":"var _jsxFileName = \"/Users/victoriamaizelman/Desktop/React/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard() {\n    let board = [];\n    for (let i = 0; i < this.props.nrows; ++i) {\n      let row = [];\n      for (let j = 0; j < this.props.ncols; ++j) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n  flipCellsAround(coord) {\n    let {\n      ncols,\n      nrows\n    } = this.props;\n    let board = this.state.board;\n    let [i, j] = coord.split(\"-\").map(Number);\n    function flipCell(i, j) {\n      // if this coord is actually on board, flip it\n\n      if (j >= 0 && j < ncols && i >= 0 && i < nrows) {\n        board[i][j] = !board[i][j];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(i, j);\n    flipCell(i + 1, j);\n    flipCell(i - 1, j);\n    flipCell(i, j + 1);\n    flipCell(i, j - 1);\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = true;\n    for (let i = 0; i < this.props.nrows; ++i) {\n      if (hasWon === false) break;\n      for (let j = 0; j < this.props.nclos; ++j) {\n        if (board[i][j] !== true) {\n          hasWon = false;\n          break;\n        }\n      }\n    }\n    this.setState({\n      board,\n      hasWon\n    });\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    // if the game is won, just show a winning msg & render nothing else\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"Board\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.state.board.map((row, i) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: row.map((cell, j) => {\n                console.log(row, cell, i, j);\n                return /*#__PURE__*/_jsxDEV(Cell, {\n                  isLit: cell,\n                  flipCellsAroundMe: flipCellsAround\n                }, \"\".concat(i, \"-\").concat(j), false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 26\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 22\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\nBoard.defaultProps = {\n  nrows: 6,\n  ncols: 6,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"names":["React","Component","Cell","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","constructor","props","state","hasWon","board","createBoard","i","nrows","row","j","ncols","push","Math","random","chanceLightStartsOn","flipCellsAround","coord","split","map","Number","flipCell","nclos","setState","render","children","fileName","_jsxFileName","lineNumber","columnNumber","className","cell","console","log","isLit","flipCellsAroundMe","concat","defaultProps"],"sources":["/Users/victoriamaizelman/Desktop/React/react-lights-out-starter/src/Board.js"],"sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 6, \n    ncols: 6,\n    chanceLightStartsOn: 0.25,\n  }\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false, \n      board: this.createBoard()\n    }\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard() {\n    let board = [];\n    for (let i = 0; i < this.props.nrows; ++i) {\n      let row = [];\n      for (let j = 0; j < this.props.ncols; ++j) {\n        row.push(Math.random() < this.props.chanceLightStartsOn)\n      }\n      board.push(row);\n    }\n\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [i, j] = coord.split(\"-\").map(Number);\n\n    function flipCell(i, j) {\n      // if this coord is actually on board, flip it\n\n      if (j >= 0 && j < ncols && i >= 0 && i < nrows) {\n        board[i][j] = !board[i][j];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(i,j);\n    flipCell(i+1,j);\n    flipCell(i-1, j);\n    flipCell(i, j+1);\n    flipCell(i, j-1);\n\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = true;\n    for (let i = 0; i < this.props.nrows; ++i) {\n      if (hasWon === false) break;\n      for (let j = 0; j < this.props.nclos; ++j) {\n        if (board[i][j] !== true) {\n          hasWon = false;\n          break;\n        }\n      }\n    }\n\n    this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n    return (\n      <>\n      <h1></h1>\n      <table className=\"Board\">\n        <tbody>\n\n            {this.state.board.map((row, i) => {\n              return <tr>\n                {row.map((cell, j) => {\n                  console.log(row, cell, i, j)\n                  return <Cell key={`${i}-${j}`} isLit={cell} flipCellsAroundMe={flipCellsAround}/>\n                })}\n              </tr>\n              \n            })}\n\n        </tbody>\n      </table>\n        {/* {this.state.hasWon \n          ? \"You win!\" \n          : this.state.board.flatMap(cell => <Cell />)} */}\n      </>\n    );\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}