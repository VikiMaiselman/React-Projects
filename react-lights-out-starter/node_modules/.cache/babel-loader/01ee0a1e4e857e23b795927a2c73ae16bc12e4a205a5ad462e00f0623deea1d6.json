{"ast":null,"code":"var _jsxFileName = \"/Users/victoriamaizelman/Desktop/React/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard() {\n    let board;\n    for (let i = 0; i < this.props.nrows; ++i) {\n      for (let j = 0; j < this.props.nclos; ++j) {\n        const rand = Math.floor(Math.random() * 2);\n        board[i][j] = rand ? true : false;\n      }\n    }\n    console.log(board);\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n  flipCellsAround(coord) {\n    let {\n      ncols,\n      nrows\n    } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x);\n    flipCell(y + 1, x);\n    flipCell(y - 1, x);\n    flipCell(y, x + 1);\n    flipCell(y, x - 1);\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = true;\n    for (let i = 0; i < this.props.nrows; ++i) {\n      if (hasWon === false) break;\n      for (let j = 0; j < this.props.nclos; ++j) {\n        if (board[i][j] !== true) {\n          hasWon = false;\n          break;\n        }\n      }\n    }\n    this.setState({\n      board,\n      hasWon\n    });\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    // if the game is won, just show a winning msg & render nothing else\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: this.state.hasWon ? \"You win!\" : this.state.board.map(cell => /*#__PURE__*/_jsxDEV(Cell, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 42\n      }, this))\n    }, void 0, false);\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\nBoard.defaultProps = {\n  nrows: 6,\n  ncols: 6,\n  chanceLightStartsOn: 2\n};\nexport default Board;","map":{"version":3,"names":["React","Component","Cell","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","constructor","props","state","hasWon","board","createBoard","i","nrows","j","nclos","rand","Math","floor","random","console","log","flipCellsAround","coord","ncols","y","x","split","map","Number","flipCell","setState","render","children","cell","fileName","_jsxFileName","lineNumber","columnNumber","defaultProps","chanceLightStartsOn"],"sources":["/Users/victoriamaizelman/Desktop/React/react-lights-out-starter/src/Board.js"],"sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 6, \n    ncols: 6,\n    chanceLightStartsOn: 2\n  }\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false, \n      board: this.createBoard()\n    }\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard() {\n    let board;\n    for (let i = 0; i < this.props.nrows; ++i) {\n      for (let j = 0; j < this.props.nclos; ++j) {\n        const rand = Math.floor(Math.random() * 2);\n        board[i][j] = rand ? true : false;\n      }\n    }\n\n    console.log(board)\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(y,x);\n    flipCell(y+1,x);\n    flipCell(y-1, x);\n    flipCell(y, x+1);\n    flipCell(y, x-1);\n\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = true;\n    for (let i = 0; i < this.props.nrows; ++i) {\n      if (hasWon === false) break;\n      for (let j = 0; j < this.props.nclos; ++j) {\n        if (board[i][j] !== true) {\n          hasWon = false;\n          break;\n        }\n      }\n    }\n\n    this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n    return (\n      <>\n        {this.state.hasWon \n          ? \"You win!\" \n          : this.state.board.map(cell => <Cell />)}\n      </>\n    );\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}